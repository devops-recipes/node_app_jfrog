# Language setting http://docs.shippable.com/ci/languages/node/
language: node_js

# Integrations are used to connect external resources to CI
# http://docs.shippable.com/integrations/overview/
integrations:
  # adding JFrog artifactory integration so that credentials are available to CI Job
  # http://docs.shippable.com/platform/integration/jfrog-artifactoryKey/#jfrog-artifactory-integration
  hub:
    - integrationName: docker_repo
      type: dockerRegistryLogin

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    - master

# using pre-defined build variables
# full list http://docs.shippable.com/ci/advancedOptions/environmentVariables/
env:
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/tests
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - JFROG_ARTIFACTORY_IMG="node_app"
    - JFROG_ARTIFACTORY_REG=hendrix-docker-local.jfrog.io # {account name}

build:
  # http://docs.shippable.com/ci/shippableyml/#ci
  ci:
    # npm mirrors can sometimes be flacky, better to use shippable_retry
    # http://docs.shippable.com/ci/advancedOptions/retry/
#    - shipctl retry "npm install"
    - npm install
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - pushd $TESTS_LOC_DIR
    - $MOD_LOC/mocha --recursive "$TESTS_LOC_DIR/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/istanbul --include-all-sources cover -root "$SHIPPABLE_REPO_DIR/routes" $SHIPPABLE_REPO_DIR/node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "$TESTS_LOC_DIR/**/*.spec.js"
    - $MOD_LOC/istanbul report cobertura --dir $CODE_COVERAGE_DIR
    - popd

  # http://docs.shippable.com/ci/shippableyml/#post_ci
  post_ci:
    - docker build -t $JFROG_ARTIFACTORY_REG/$JFROG_ARTIFACTORY_IMG:$BRANCH.$BUILD_NUMBER .
    - if [ "$IS_PULL_REQUEST" != true ]; then docker push $DOCKER_ACC/$DOCKER_REPO:$BRANCH.$BUILD_NUMBER; fi

  #this will be ignored if you are not using Assembly Lines to trigger another job after ci
  on_success:
    - shipctl put_resource_state node_app_img_jf versionName $BRANCH.$BUILD_NUMBER

## OPTIONAL : In case you want to use this image in CD Assembly Lines
resources:
  - name: node_app_img_jf
    type: image
    integration: docker_repo # replace with your integration name
    versionTemplate:
      sourceName: "hendrix-docker-local.jfrog.io/node_app" # replace with your Hub URL
      versionName: latest

  - name: base_ver
    type: version
    versionTemplate:
      versionName: "0.0.0"

  - name: curr_ver
    type: version
    versionTemplate:
      versionName: "tbd"

jobs:
  - name: node_app_jfrog_runCI
    type: runCI
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - OUT: node_app_img_jf
    flags:
      - jfrog
      - docker

  - name: bump_minor
    type: runSh
    steps:
      - IN: base_ver
      - TASK:
          name: plus_minor
          script:
            - BASE_VER=$(shipctl get_resource_version_key base_ver versionName)
            - NEW_VERSION="$(shipctl bump_version $BASE_VER minor)"
      - OUT: curr_ver
    on_success:
      script:
        - shipctl put_resource_state_multi "curr_ver" "versionName=$NEW_VERSION"

  - name: bump_patch
    type: runSh
    steps:
      - IN: base_ver
      - TASK:
          name: plus_minor
          script:
            - BASE_VER=$(shipctl get_resource_version_key base_ver versionName)
            - NEW_VERSION="$(shipctl bump_version $BASE_VER patch)"
      - OUT: curr_ver
    on_success:
      script:
        - shipctl put_resource_state_multi "curr_ver" "versionName=$NEW_VERSION"

  - name: bump_major
    type: runSh
    steps:
      - IN: base_ver
      - TASK:
          name: plus_minor
          script:
            - BASE_VER=$(shipctl get_resource_version_key base_ver versionName)
            - NEW_VERSION="$(shipctl bump_version $BASE_VER major)"
      - OUT: curr_ver
    on_success:
      script:
        - shipctl put_resource_state_multi "curr_ver" "versionName=$NEW_VERSION"